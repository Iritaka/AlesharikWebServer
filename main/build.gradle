apply plugin: 'java'
apply plugin: 'idea'
buildDir = new File('./out/')

//====================Deploy====================\\

task buildDeploy {}

//====================Cleaning====================\\

clean.doFirst {
    delete 'build'
    delete 'out'
    delete 'deploy'
    delete buildDir.toString()
    delete projectDir.toString() + "/reporting/"
}

//====================Config====================\\

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
    }
}

dependencies {
    compile project(':alesharikwebserver-api')

    testCompile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.18'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.18'
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.21'
}

//====================Build====================\\

task checkDirs {
    if(!buildDir.exists())
        buildDir.mkdirs()
}

build.dependsOn checkDirs
build.dependsOn jar
build.dependsOn check

buildDeploy.dependsOn checkDirs
buildDeploy.dependsOn jar
buildDeploy.dependsOn check

task codeCoverageReport(dependsOn: test, type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = fileTree(buildDir.toString() + '/classes/')
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.alesharik.webserver.main.Main',
                'Can-Retransform-Classes': 'true',
                'Premain-Class': 'com.alesharik.webserver.api.agent.Agent'
        )
    }
}

javadoc.destinationDir = new File(buildDir.toString() + '/javadoc/')

task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    group = 'build'
}
task packageSources(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
    group = 'build'
}

artifacts {
    archives packageJavadoc
    archives packageSources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.alesharik'
            artifactId 'alesharikwebserver-main'
            version this.version

            from components.java
        }
    }
}

jar.dependsOn test

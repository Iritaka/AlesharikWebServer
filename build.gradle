//apply plugin: 'java'
//apply plugin: 'idea'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
        classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
    id 'java'
    id 'idea'
    id 'maven-publish'
}

def deployDir = new File("./deploy/")
def userProp = project.hasProperty('user') ? project.property('user') : System.getenv('user')
def keyProp = project.hasProperty('key') ? project.property('key') : System.getenv('key')

repositories {
    mavenCentral()
    mavenLocal()
}


subprojects {
    buildscript {
        repositories {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }

        dependencies {
            classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
            classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
        }
    }

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }


    bintray {
        user = userProp
        key = keyProp
        configurations = ['archives']
        publications = ['mavenJava']
        dryRun = false
        pkg {
            repo = 'com.alesharik'
            name = 'alesharikwebserver'
            licenses = ['GPL-3.0']
            vcsUrl = 'https://github.com/alesharik/AlesharikWebServer'
        }
    }
}

clean.doFirst {
    deployDir.deleteDir()
}

task checkDeployDir {
    if(!deployDir.exists())
        deployDir.mkdirs()
}

task copyArtifacts(dependsOn: [checkDeployDir, ':alesharikwebserver-api:build', 'alesharikwebserver-main:build'], type: Copy) {
    from('./api/out/libs/') {
        exclude 'alesharikwebserver-api.jar'
    }
    from './main/out/libs/'
    rename('alesharikwebserver-api-all.jar', 'agent.jar')
    rename('alesharikwebserver-main.jar', 'main.jar')
    into deployDir.toString()
}

task generateConfig(dependsOn: copyArtifacts) {
    def config = new File(deployDir.toString() + "/configuration.xml")
    config.text = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
            "<configuration>\n" +
            "    <api>\n" +
            "        <config>\n" +
            "            <fileCheckEnabled>true</fileCheckEnabled> <!-- REQUIRED. Enable config file hot reload -->\n" +
            "        </config>\n" +
            "        <logger>\n" +
            "            <listenerQueueCapacity>128</listenerQueueCapacity>\n" +
            "            <logFile>./logs/log-{\$time}.log</logFile>\n" +
            "        </logger>\n" +
            "        <pluginManager>\n" +
            "            <folder>./plugins/</folder>\n" +
            "            <hotReload>false</hotReload>\n" +
            "        </pluginManager>\n" +
            "    </api>\n" +
            "    <modules>\n" +
            "\n" +
            "    </modules>\n" +
            "    <main>\n" +
            "        <init>\n" +
            "\n" +
            "        </init>\n" +
            "    </main>\n" +
            "</configuration>"
}

task generateStartScript(dependsOn: copyArtifacts) {
    def startScript = new File(deployDir.toString() + "/start.sh")
    startScript.text = "#!/usr/bin/env bash\n" +
            "if type -p java; then\n" +
            "    echo found java executable in PATH\n" +
            "    _java=java\n" +
            "elif [[ -n \"\$JAVA_HOME\" ]] && [[ -x \"\$JAVA_HOME/bin/java\" ]];  then\n" +
            "    echo found java executable in JAVA_HOME\n" +
            "    _java=\"\$JAVA_HOME/bin/java\"\n" +
            "else\n" +
            "    echo \"no java found!\"\n" +
            "    exit 1\n" +
            "fi\n" +
            "sudo -s \${_java} -javaagent:agent.jar -jar main.jar"
}

task copyServerDashboard(dependsOn: checkDeployDir, type: Copy) {
    from(rootProject.projectDir.toString() + "/serverDashboard/")
    into(deployDir.toString() + "/serverDashboard/")
}

task prepareDeploy(dependsOn: [clean, generateStartScript, generateConfig, copyServerDashboard]) {
    println 'Take server at deploy folder'
}

task bintray(dependsOn: [':alesharikwebserver-api:bintrayUpload', ':alesharikwebserver-main:bintrayUpload', ':alesharikwebserver-database:bintrayUpload']) {}

task publishArtifacts(dependsOn: [':alesharikwebserver-main:publishMavenJavaPublicationToMavenLocal', ':alesharikwebserver-main:publishMavenJavaPublicationToMavenLocal', ':alesharikwebserver-database:publishMavenJavaPublicationToMavenLocal']) {}
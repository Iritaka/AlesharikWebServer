apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jcstress'

def nativesSrc = 'com/alesharik/webserver/api/native/'
def nativeClasses = new ArrayList<String>()
nativeClasses.add("com.alesharik.webserver.api.Utils")

buildDir = new File('./out/')
def nativeLibsDir = new File('./out/nativeLibs')

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
    }
}

dependencies {
    compile group: 'com.lmax', name: 'disruptor', version: '3.3.6'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.1.1'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.2'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1205-jdbc42'
    compile group: 'org.ow2.asm', name: 'asm-all', version: '5.2'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile group: 'org.jctools', name: 'jctools-core', version: '2.0.1'
    compile (group: 'log4j', name: 'log4j', version: '1.2.15') {
        exclude module: 'jms'
        exclude module: 'jmxtools'
        exclude module: 'jmxri'
    }

    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'com.opencsv', name: 'opencsv', version: '3.9'
    compile group: 'io.github.lukehutch', name: 'fast-classpath-scanner', version: '2.0.18'

    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-jdk-client', version: '1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly', version: '1.2.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-spi', version: '1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-core', version: '1.13.1'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-framework', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-server', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-servlet', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-framework-monitoring', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-monitoring', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-server-monitoring', version: '2.3.3'

    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.2'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.6'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-websockets', version: '2.3.3'

    //Javax
    compile group: 'javax.websocket', name: 'javax.websocket-api', version: '1.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.18'
    compile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.18'

    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.21'
    compile group: 'org.openjdk.jcstress', name: 'jcstress-core', version: '0.3'

    compile files("${System.properties['java.home']}/../lib/tools.jar")
    compile files('one-nio/one-nio.jar')

    compile project(':alesharikwebserver-internals')
//    compile group: 'ru.odnoklassniki', name: 'one-nio', version: '1.0'
}

task checkDirs {
    if(!buildDir.exists())
        buildDir.mkdirs()
    if(!nativeLibsDir.exists())
        nativeLibsDir.mkdirs()
}

build.dependsOn checkDirs
build.dependsOn test

task generateJavaHeaders(dependsOn: compileJava, type: Exec) {
    def classesDir = sourceSets.main.output.classesDir
    workingDir classesDir
    executable "${System.properties["java.home"]}/../bin/javah"
    args "-d", sourceSets.main.output.classesDir.toString() + '/' + nativesSrc
    args "-classpath", buildDir.parent.toString() + "/one-nio/one-nio.jar:" + sourceSets.main.output.classesDir.toString()
    doFirst {
        nativeClasses.forEach{ clazz -> args clazz }
    }

    errorOutput = System.out
}

task copyNativeDir(dependsOn: compileJava, type: Copy) {
    from './src/' + nativesSrc
    into sourceSets.main.output.classesDir.toString() + '/' + nativesSrc
}

task executeCmake(dependsOn: [copyNativeDir, generateJavaHeaders], type: Exec) {
    workingDir sourceSets.main.output.classesDir.toString() + '/' + nativesSrc
    commandLine 'cmake', '.'

    errorOutput = System.out
}

task makeNatives(dependsOn: executeCmake, type: Exec) {
    workingDir sourceSets.main.output.classesDir.toString() + '/' + nativesSrc

    commandLine "make"

    errorOutput = System.out
}

task copyNatives(dependsOn: makeNatives, type: Copy) {
    from(sourceSets.main.output.classesDir.toString() + '/' + nativesSrc) {
        include '**/*.so'
        include '**/*.dll'
    }
    from(projectDir.toString() + "/one-nio/native") {
        include '**/*.so'
        include '**/*.dll'
    }
    includeEmptyDirs = false
    into nativeLibsDir.toString()
}

task fatJar(type: Jar) {
    manifest {
        attributes(
                'Premain-Class': 'com.alesharik.webserver.api.agent.Agent',
                'Can-Retransform-Classes': 'true'
        )
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

clean.doFirst {
    delete buildDir.toString()
    delete projectDir.toString() + "/reporting/"
}

processResources.dependsOn(copyNatives)

processResources {
    from nativeLibsDir.toString()
}

jar {
    manifest {
        attributes(
                'Premain-Class': 'com.alesharik.webserver.api.agent.Agent',
                'Can-Retransform-Classes': 'true'
        )
    }
    from {
        configurations.compile
                .filter { it.toString().contains("one-nio") }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    jvmArgs '-javaagent:' + buildDir.toString() + '/libs/alesharikwebserver-api-all.jar'
}

test.dependsOn fatJar
build.dependsOn fatJar

task codeCoverageReport(dependsOn: test, type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = fileTree(buildDir.toString() + '/classes/')
}

javadoc.destinationDir = new File(buildDir.toString() + '/javadoc/')

task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.alesharik'
            artifactId 'alesharikwebserver-api'
            version '0.1'

            artifact source: buildDir.toString() + '/libs/alesharikwebserver-api.jar', classifier: 'src'
            artifact source: buildDir.toString() + '/libs/alesharikwebserver-api-sources.jar', classifier: 'sources', extension: 'zip'
            artifact source: buildDir.toString() + '/libs/alesharikwebserver-api-javadoc.jar', classifier: 'javadoc', extension: 'zip'

            from components.java
        }
    }
}

jcstress {
    jvmArgs = '-server -XX:+UnlockDiagnosticVMOptions'
    iterations = 10
}

jar.dependsOn packageJavadoc
jar.dependsOn packageSources
jar.dependsOn processResources
jar.dependsOn test